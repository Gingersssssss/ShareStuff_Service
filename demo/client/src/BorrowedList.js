import React, { useEffect, useState } from 'react';
import axios from 'axios';

function BorrowedList() {
  const [records, setRecords] = useState([]);

  useEffect(() => {
    fetchBorrowed();
  }, []);

  const fetchBorrowed = async () => {
    try {
      const response = await axios.get('/api/serviceKhing/borrowed'); // ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• borrowed_record ‡∏à‡∏≤‡∏Å API
      setRecords(response.data);  // ‡πÉ‡∏ä‡πâ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å response.data (‡∏ã‡∏∂‡πà‡∏á‡πÄ‡∏õ‡πá‡∏ô array ‡∏Ç‡∏≠‡∏á borrowedRecord)
    } catch (error) {
      console.error('Error fetching borrowed items:', error);
    }
  };

  const handleReturn = async (id) => {
    try {
      await axios.post(`/api/serviceKhing/return/${id}`);  // ‡∏™‡πà‡∏á‡∏Ñ‡∏≥‡∏Ç‡∏≠‡∏Ñ‡∏∑‡∏ô‡∏Ç‡∏≠‡∏á‡∏ó‡∏µ‡πà‡∏°‡∏µ id ‡∏ô‡∏µ‡πâ
      alert('‡∏Ñ‡∏∑‡∏ô‡∏Ç‡∏≠‡∏á‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢‡πÅ‡∏•‡πâ‡∏ß');
      fetchBorrowed(); // ‡∏£‡∏µ‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏´‡∏•‡∏±‡∏á‡∏à‡∏≤‡∏Å‡∏Ñ‡∏∑‡∏ô‡∏Ç‡∏≠‡∏á
    } catch (error) {
      alert('‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏Ñ‡∏∑‡∏ô‡∏Ç‡∏≠‡∏á');
    }
  };

  return (
    <div className="container mt-5">
      <h2 className="mb-4 text-center">üìã ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏Ç‡∏≠‡∏á‡∏ó‡∏µ‡πà‡∏ñ‡∏π‡∏Å‡∏¢‡∏∑‡∏°</h2>
      {records.length === 0 ? (
        <p className="text-center">‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡∏≠‡∏á‡∏ó‡∏µ‡πà‡∏ñ‡∏π‡∏Å‡∏¢‡∏∑‡∏°</p>
      ) : (
        <table className="table table-bordered text-center">
          <thead className="table-dark">
            <tr>
              <th>‡∏ú‡∏π‡πâ‡∏¢‡∏∑‡∏°</th>
              <th>‡πÑ‡∏≠‡πÄ‡∏ó‡∏°</th>
              <th>‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏¢‡∏∑‡∏°</th>
              <th>‡∏Ñ‡∏£‡∏ö‡∏Å‡∏≥‡∏´‡∏ô‡∏î</th>
              <th>‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞</th>
              <th>‡∏Ñ‡∏∑‡∏ô‡∏Ç‡∏≠‡∏á</th>
            </tr>
          </thead>
          <tbody>
            {records.map((record) => (
              <tr key={record.id}>
                <td>{record.borrowedBy}</td>
                <td>{record.itemId}</td>
                <td>{new Date(record.borrowDate).toLocaleDateString()}</td>
                <td>{new Date(record.dueDate).toLocaleDateString()}</td>
                <td>
                  {new Date(record.dueDate) < new Date()
                    ? 'üü• ‡πÄ‡∏Å‡∏¥‡∏ô‡∏Å‡∏≥‡∏´‡∏ô‡∏î'
                    : '‚úÖ ‡∏õ‡∏Å‡∏ï‡∏¥'}
                </td>
                <td>
                  <button
                    className="btn btn-danger btn-sm"
                    onClick={() => handleReturn(record.id)}
                  >
                    ‡∏Ñ‡∏∑‡∏ô‡∏Ç‡∏≠‡∏á
                  </button>
                </td>
              </tr>
            ))}
          </tbody>
        </table>
      )}
    </div>
  );
}

export default BorrowedList;
